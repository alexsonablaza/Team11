#include <Servo.h>             //Servo library
Servo servo_left;        //initialize a servo object for the connected servo  
Servo servo_right;
//turn on eeg > arduino > bluetooth                
int angle = 0;    

//GPIO13 CONNECTION LED STATUS
#define LED 13
#define BAUDRATE 57600
#define DEBUGOUTPUT 0

//GPIO 9 OUTPUT
#define LIGHTON 9
#define powercontrol 10

// checksum variables
byte generatedChecksum = 0;
byte checksum = 0; 
int payloadLength = 0;
byte payloadData[64] = {
  0};
byte poorQuality = 0;
byte attention = 0;
byte meditation = 0;

// system variables
long lastReceivedPacket = 0;
boolean bigPacket = false;

//////////////////////////
// Microprocessor Setup //
//////////////////////////
void setup() {

  servo_left.attach(7);
  servo_right.attach(8);
  pinMode(LIGHTON, OUTPUT);
 
  pinMode(LED, OUTPUT);
  Serial.begin(BAUDRATE);           // USB

}

////////////////////////////////
// Read data from Serial UART //
////////////////////////////////
byte ReadOneByte() {
  int ByteRead;

  while(!Serial.available());
  ByteRead = Serial.read();

#if DEBUGOUTPUT  
  Serial.print((char)ByteRead);   // echo the same byte out the USB serial (for debug purposes)
#endif

  return ByteRead;
}

/////////////
//MAIN LOOP//
/////////////
void loop() {


  // Look for sync bytes
  if(ReadOneByte() == 170) {
    if(ReadOneByte() == 170) {

      payloadLength = ReadOneByte();
      if(payloadLength > 169)                      //Payload length can not be greater than 169
          return;
          
      generatedChecksum = 0;        
      for(int i = 0; i < payloadLength; i++) {  
        payloadData[i] = ReadOneByte();            //Read payload into memory
        generatedChecksum += payloadData[i];
      }   

      checksum = ReadOneByte();                      //Read checksum byte from stream      
      generatedChecksum = 255 - generatedChecksum;   //Take one's compliment of generated checksum

        if(checksum == generatedChecksum) {    

        poorQuality = 200;
        attention = 0;
        meditation = 0;

        for(int i = 0; i < payloadLength; i++) {    // Parse the payload
          switch (payloadData[i]) {
          case 2:
            i++;            
            poorQuality = payloadData[i];
            bigPacket = true;            
            break;
          case 4:
            i++;
            attention = payloadData[i];                        
            break;
          case 5:
            i++;
            meditation = payloadData[i];
            break;
          
          case 0x80:
            i = i + 4;
            break;
         
          case 0x83:
            i = i + 25;      
            break;
          default:
            break;
          } // switch
        } // for loop

#if !DEBUGOUTPUT

        /*if(bigPacket) {
          if(poorQuality == 0)
            digitalWrite(LED, HIGH);
          else
            digitalWrite(LED, LOW);
       */
if(bigPacket){          
if (attention >= 0 && attention <= 40)
{
  servo_left.write(0);              //move to 45 degrees
  servo_right.write(0);
  delay(1000);
}
else if (attention >= 75 && attention <= 100)
{
  servo_left.write(0);              //move to 45 degrees
  servo_right.write(0);
  delay(1000);
}
else if (attention >= 40 && attention <= 50) 
{
  servo_left.write(45);              //move to 45 degrees
  servo_right.write(45); 
  delay(1000);
}
else if (attention >= 50 && attention <= 75) 
{
  servo_left.write(45);              //move to 45 degrees
  servo_right.write(45);
  delay(1000);
}
 Serial.print("PoorQuality: ");
          Serial.print(poorQuality, DEC);
          Serial.print(" Attention: ");
          Serial.print(attention, DEC);
          Serial.print(" Time since last packet: ");
          Serial.print(millis() - lastReceivedPacket, DEC);
          lastReceivedPacket = millis();
          Serial.print("\n");
/*
          switch(attention / 13) {
         case 0:
          servo_left.write(45);              //move to 45 degrees
          servo_right.write(45);
          /*
          Serial.print("PoorQuality: ");
          Serial.print(poorQuality, DEC);
          Serial.print(" Attention: ");
          Serial.print(attention, DEC);
          Serial.print(" Time since last packet: ");
          Serial.print(millis() - lastReceivedPacket, DEC);
          lastReceivedPacket = millis();
          Serial.print("\n");
          delay(100);       
          break;
          
  
         case 1:
          servo_left.write(0);                 //reset to initial state.
          servo_right.write(0);    
         /*
         Serial.print("PoorQuality: ");
          Serial.print(poorQuality, DEC);
          Serial.print(" Attention: ");
          Serial.print(attention, DEC);
          Serial.print(" Time since last packet: ");
          Serial.print(millis() - lastReceivedPacket, DEC);
          lastReceivedPacket = millis();
          Serial.print("\n");
          delay(100);       
          
          break;
          

         case 2:              
           servo_left.write(90);                
           servo_right.write(90);
           /*Serial.print("PoorQuality: ");
           Serial.print(poorQuality, DEC);
           Serial.print(" Attention: ");
           Serial.print(attention, DEC);
           Serial.print(" Time since last packet: ");
           Serial.print(millis() - lastReceivedPacket, DEC);
           lastReceivedPacket = millis();
           Serial.print("\n");
           delay(100);   
           
           break;
           
         case 3:
          servo_left.write(0);              //reset to 0
          servo_right.write(0);
          /*
          Serial.print("PoorQuality: ");
          Serial.print(poorQuality, DEC);
          Serial.print(" Attention: ");
          Serial.print(attention, DEC);
          Serial.print(" Time since last packet: ");
          Serial.print(millis() - lastReceivedPacket, DEC);
          lastReceivedPacket = millis();
          Serial.print("\n");
          delay(100);      
          
            break;
  }
  */
 }
 }
#endif        
        bigPacket = false;        
      }
      else {
        // Checksum Error
      }  // end if else for checksum
    } // end if read 0xAA byte
  } // end if read 0xAA byte

